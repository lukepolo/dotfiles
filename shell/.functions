#################################################################
### OS
#################################################################

archive () {
   zip -r "$1".zip -i "$1" ;
}

#################################################################
### MySQL
#################################################################

function db {
    if [ "$1" = "refresh" ]; then
        echo "drop database $2;" | mysql -u root
        echo "create database $2;" | mysql -u root
    elif [ "$1" = "create" ]; then
        echo "create database $2;" | mysql -u root
    elif [ "$1" = "drop" ]; then
         echo "drop database $2;" | mysql -u root
    fi
}

#################################################################
### GIT
#################################################################

# Pushes all the code up in the current directory
function pushme {

    branch=`git branch | grep "*"`

    params=''

    for i in $*;
    do
        params=" $params $i"
    done

    params=$(echo $params | sed 's,^ *,,; s, *$,,')

    git add --all
    git commit -m "$params"
    git push origin ${branch/* /}
}

rebase() {
    if [ $1 ]
        then
            git pull origin $1 --rebase
        else
            echo "Missing branch to rebase from"
    fi
}

commit() {
    echo "What issue are you working on?"
    read issue

    echo "What did you work on?"
    read message

    if [ ! -z "$issue" ]
    then
        issue="$issue : "
    fi

    branch=`git branch | grep "*"`

    git add --all
    git commit -m "$issue$message"
    git push origin ${branch/* /}
}

build() {
    git add --all
    branch=`git branch | grep "*"`
    git commit -m "#build" --allow-empty
    git push origin ${branch/* /}
}

deleteBranches() {
    git branch --merged origin/develop | grep -v master | grep -v develop | grep -v dev | xargs git branch -d
}

tag() {
    git tag -a $1 -m "$1";
    git push --tags
}

rtag() {
    git tag --delete $1
    git push --delete origin $1
}

#################################################################
### Port Information
#################################################################

port() {
    if [ $1 ]
    then
        sudo -v;
        echo PIDs:
        sudo lsof -i tcp:$1 | grep -v "Google"
        echo "\n"
        echo Listeners:
        sudo netstat -vanp tcp | grep $1
    else
        echo Must supply a port.
    fi
}

kport() {
    if [ $1 ]
    then
        sudo -v;
        pidsFound=($(sudo lsof -i tcp:$1 | grep -v "Google" | awk 'NR>1{ print $2 }' | sort -u))
        if (( ${#pidsFound[@]} ))
        then
            for pid in "${pidsFound[@]}"
            do
                echo Killing $pid
                sudo echo $pidsFound | xargs kill -9
            done
        else
            echo Did not find anything running on $1
        fi
    else
        echo Must supply a port.
    fi
}
